type CanisterLogFeature = variant {  filterMessageByContains;  filterMessageByRegex;};type CanisterLogMessages = record {  data : vec LogMessageData;  lastAnalyzedMessageTimeNanos : opt nat64;};type CanisterLogMessagesInfo = record {  features : vec opt CanisterLogFeature;  lastTimeNanos : opt nat64;  count : nat32;  firstTimeNanos : opt nat64;};type CanisterLogRequest = variant {  getMessagesInfo;  getMessages : GetLogMessagesParameters;  getLatestMessages : GetLatestLogMessagesParameters;};type CanisterLogResponse = variant {  messagesInfo : CanisterLogMessagesInfo;  messages : CanisterLogMessages;};type CanisterMetrics = record { data : CanisterMetricsData };type CanisterMetricsData = variant {  hourly : vec HourlyMetricsData;  daily : vec DailyMetricsData;};type CollectMetricsRequestType = variant { force; normal };type Conf = record {  gld_nft_canister_ids : vec record { principal; NftCanisterConf };  gldt_ledger_canister_id : principal;};type DailyMetricsData = record {  updateCalls : nat64;  canisterHeapMemorySize : NumericEntity;  canisterCycles : NumericEntity;  canisterMemorySize : NumericEntity;  timeMillis : int;};type GetInformationRequest = record {  status : opt StatusRequest;  metrics : opt MetricsRequest;  logs : opt CanisterLogRequest;  version : bool;};type GetInformationResponse = record {  status : opt StatusResponse;  metrics : opt MetricsResponse;  logs : opt CanisterLogResponse;  version : opt nat;};type GetLatestLogMessagesParameters = record {  upToTimeNanos : opt nat64;  count : nat32;  filter : opt GetLogMessagesFilter;};type GetLogMessagesFilter = record {  analyzeCount : nat32;  messageRegex : opt text;  messageContains : opt text;};type GetLogMessagesParameters = record {  count : nat32;  filter : opt GetLogMessagesFilter;  fromTimeNanos : opt nat64;};type GetMetricsParameters = record {  dateToMillis : nat;  granularity : MetricsGranularity;  dateFromMillis : nat;};type GldNft = record {  requested_memo : vec nat8;  older_record : opt GldNft;  to_subaccount : vec nat8;  minted : opt GldtMinted;  grams : nat16;  gldt_minting_timestamp_seconds : nat64;  gld_nft_canister_id : principal;};type GldtBurned = record { burn_block_height : nat64 };type GldtMinted = record {  mint_block_height : nat;  last_audited_timestamp_seconds : nat64;  burned : opt GldtBurned;};type HourlyMetricsData = record {  updateCalls : vec nat64;  canisterHeapMemorySize : vec nat64;  canisterCycles : vec nat64;  canisterMemorySize : vec nat64;  timeMillis : int;};type InfoRequest = record { nft_id : text; source_canister : principal };type LogMessageData = record { timeNanos : nat64; message : text };type MetricsGranularity = variant { hourly; daily };type MetricsRequest = record { parameters : GetMetricsParameters };type MetricsResponse = record { metrics : opt CanisterMetrics };type NftCanisterConf = record { grams : nat16 };type NftInfo = record { info : opt GldNft };type NumericEntity = record {  avg : nat64;  max : nat64;  min : nat64;  first : nat64;  last : nat64;};type Offer = record { block_height : nat; tokens_minted : nat };type OfferRequest = record {  nft_id : text;  requested_memo : vec nat8;  to_subaccount : vec nat8;};type Result = variant { Ok : text; Err : text };type Result_1 = variant { Ok : Offer; Err : text };type SaleStatusShared = record { token_id : text };type StatusRequest = record {  memory_size : bool;  cycles : bool;  heap_memory_size : bool;};type StatusResponse = record {  memory_size : opt nat64;  cycles : opt nat64;  heap_memory_size : opt nat64;};type SubAccountInfo = record { account : SubAccoutInfo2 };type SubAccoutInfo2 = record { sub_account : vec nat8 };type SubscriberNotification = record {  sale : SaleStatusShared;  escrow_info : SubAccountInfo;};type UpdateInformationRequest = record {  metrics : opt CollectMetricsRequestType;};service : (opt Conf) -> {  get_canistergeek_information : (GetInformationRequest) -> (      GetInformationResponse,    ) query;  get_conf : () -> (Conf);  nft_info : (InfoRequest) -> (NftInfo);  notify_sale_nft_origyn : (SubscriberNotification) -> (Result);  request_offer : (OfferRequest) -> (Result_1);  update_canistergeek_information : (UpdateInformationRequest) -> () query;}
