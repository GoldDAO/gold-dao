type Conf = record {
  gld_nft_canister_conf : vec GldNftConf;
  compensation_factor : nat64;
  gldt_canister_id : principal;
  fallback_timer_interval_secs : nat64;
  enabled : bool;
  gldt_ledger_canister_id : principal;
  execution_delay_secs : nat64;
};
type Custom = record { error_message : opt text; error_type : Type };
type GldNftConf = record {
  weight : nat16;
  gld_nft_canister_id : principal;
  last_query_index : nat;
};
type Result = variant { Ok : nat; Err };
type Result_1 = variant { Ok : text; Err : Custom };
type Result_2 = variant { Ok; Err : Custom };
type Type = variant {
  TransferError;
  Unauthorized;
  CompensationDisabled;
  Other;
};
service : (opt Conf) -> {
  fetch_metadata : () -> (text) query;
  get_balance : () -> (Result);
  get_compensation_enabled : () -> (bool) query;
  get_compensation_factor : () -> (nat64) query;
  get_execution_delay_secs : () -> (nat64) query;
  get_fallback_timer_interval_secs : () -> (nat64) query;
  get_gld_nft_conf : () -> (vec GldNftConf) query;
  import_data : (text) -> (Result_1);
  notify_compensation_job : () -> (Result_2);
  set_compensation_enabled : (bool) -> (Result_2);
  set_compensation_factor : (nat64) -> (Result_2);
  set_execution_delay_secs : (nat64) -> (Result_2);
  set_fallback_timer_interval_secs : (nat64) -> (Result_2);
  set_gld_nft_conf : (vec GldNftConf) -> (Result_2);
}
