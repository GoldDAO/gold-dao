type Account = record { owner : principal; subaccount : opt blob };
type AccountIdentifier = record { hash : blob };
type AddHotKey = record { new_hot_key : opt principal };
type Amount = record { e8s : nat64 };
type Args = variant { Upgrade : UpgradeArgs; Init : InitArgs };
type BuildVersion = record { major : nat32; minor : nat32; patch : nat32 };
type By = variant {
  NeuronIdOrSubaccount : record {};
  MemoAndController : MemoAndController;
  Memo : nat64;
};
type ChangeAutoStakeMaturity = record {
  requested_setting_for_auto_stake_maturity : bool;
};
type ClaimOrRefresh = record { by : opt By };
type Command = variant {
  Spawn : Spawn;
  Split : Split;
  Follow : Follow;
  ClaimOrRefresh : ClaimOrRefresh;
  Configure : Configure;
  RegisterVote : RegisterVote;
  Merge : Merge;
  DisburseToNeuron : DisburseToNeuron;
  StakeMaturity : StakeMaturity;
  MergeMaturity : MergeMaturity;
  Disburse : Disburse;
};
type Configure = record { operation : opt Operation };
type DepositAccount = record {
  legacy_account_id : text;
  icrc_account : Account;
};
type Disburse = record {
  to_account : opt AccountIdentifier;
  amount : opt Amount;
};
type DisburseToNeuron = record {
  dissolve_delay_seconds : nat64;
  kyc_verified : bool;
  amount_e8s : nat64;
  new_controller : opt principal;
  nonce : nat64;
};
type Follow = record { topic : int32; followees : vec NeuronId };
type IncreaseDissolveDelay = record {
  additional_dissolve_delay_seconds : nat32;
};
type InitArgs = record { test_mode : bool; commit_hash : text };
type ListNeuronsResponse = record { neurons : NeuronList };
type ManageNnsNeuronRequest = record { command : Command; neuron_id : nat64 };
type ManageNnsNeuronResponse = variant { Success : text; InternalError : text };
type ManageRewardRecipientsRequest = record { list : vec RewardsRecipient };
type ManageRewardRecipientsResponse = variant { Success; InternalError : text };
type MemoAndController = record { controller : opt principal; memo : nat64 };
type Merge = record { source_neuron_id : opt NeuronId };
type MergeMaturity = record { percentage_to_merge : nat32 };
type NeuronId = record { id : nat64 };
type NeuronList = record {
  active : vec NeuronWithMetric;
  disbursed : vec nat64;
  spawning : vec nat64;
};
type NeuronWithMetric = record {
  id : nat64;
  dissolve_delay : nat64;
  maturity : nat64;
  staked_amount : nat64;
  deposit_account : opt DepositAccount;
  dissolving : bool;
};
type Operation = variant {
  RemoveHotKey : RemoveHotKey;
  AddHotKey : AddHotKey;
  ChangeAutoStakeMaturity : ChangeAutoStakeMaturity;
  StopDissolving : record {};
  StartDissolving : record {};
  IncreaseDissolveDelay : IncreaseDissolveDelay;
  JoinCommunityFund : record {};
  LeaveCommunityFund : record {};
  SetDissolveTimestamp : SetDissolveTimestamp;
};
type RegisterVote = record { vote : int32; proposal : opt NeuronId };
type RemoveHotKey = record { hot_key_to_remove : opt principal };
type RewardsRecipient = record {
  tag : text;
  reward_weight : nat16;
  account : Account;
};
type SetDissolveTimestamp = record { dissolve_timestamp_seconds : nat64 };
type Spawn = record {
  percentage_to_spawn : opt nat32;
  new_controller : opt principal;
  nonce : opt nat64;
};
type Split = record { amount_e8s : nat64 };
type StakeMaturity = record { percentage_to_stake : opt nat32 };
type StakeNnsNeuronResponse = variant { Success : nat64; InternalError : text };
type UpgradeArgs = record { wasm_version : BuildVersion; commit_hash : text };
service : (Args) -> {
  list_neurons : () -> (ListNeuronsResponse) query;
  manage_nns_neuron : (ManageNnsNeuronRequest) -> (ManageNnsNeuronResponse);
  manage_reward_recipients : (ManageRewardRecipientsRequest) -> (
      ManageRewardRecipientsResponse,
    );
  stake_nns_neuron : () -> (StakeNnsNeuronResponse);
}
