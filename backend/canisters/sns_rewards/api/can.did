type Args = record { test_mode : bool };
type GetNeuronResponse = record {
  id : NeuronId;
  owner : principal;
  info : NeuronInfo;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec record { text; text };
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type NeuronId = record { id : vec nat8 };
type NeuronInfo = record {
  rewarded_maturity : vec record { TokenSymbol; nat64 };
  accumulated_maturity : nat64;
  last_synced_maturity : nat64;
};
type PaymentRound = record {
  id : nat16;
  round_funds_total : nat;
  token : TokenSymbol;
  payments : vec record { NeuronId; record { nat64; PaymentStatus; nat64 } };
  total_neuron_maturity : nat64;
  fees : nat;
  ledger_id : principal;
  round_status : PaymentRoundStatus;
  date_initialized : nat64;
};
type PaymentRoundStatus = variant {
  Failed : text;
  CompletedPartial;
  CompletedFull;
  InProgress;
  Pending;
};
type PaymentStatus = variant { Failed : text; Triggered; Completed; Pending };
type StreamingStrategy = variant {
  Callback : record {
    token : Token;
    callback : func (Token) -> (HttpResponse) query;
  };
};
type Token = record {
  key : text;
  sha256 : opt vec nat8;
  index : nat;
  content_encoding : text;
};
type TokenSymbol = variant { ICP; OGY; GLDGov };
service : (Args) -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  convert_neuron_disp : (NeuronId) -> (text) query;
  get_active_payment_rounds : () -> (vec record { nat16; PaymentRound }) query;
  get_all_neuron_owners : () -> (vec principal) query;
  get_all_neurons : () -> (nat64) query;
  get_historic_payment_rounds : () -> (
      vec record { nat16; PaymentRound },
    ) query;
  get_maturity_history_of_neuron : (NeuronId, opt nat64) -> (
      vec record { nat64; NeuronInfo },
    ) query;
  get_n_history : (opt nat64) -> (
      vec record { record { NeuronId; nat64 }; NeuronInfo },
    ) query;
  get_neuron_by_id : (NeuronId) -> (opt NeuronInfo) query;
  get_neurons_of_principal : (principal) -> (vec GetNeuronResponse) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  retry_failed_payment_rounds : () -> ();
  sync_neurons_manual_trigger : () -> ();
  sync_user_rewards : () -> ();
  update_info : () -> (text);
}
