type Args = record {
  sns_gov_canister_id : principal;
  test_mode : bool;
  ogy_ledger_canister_id : principal;
  icp_ledger_canister_id : principal;
  sns_ledger_canister_id : principal;
};
type NeuronId = record { id : vec nat8 };
type Result = variant { Ok : NeuronId; Err : UserClaimErrorResponse };
type Result_1 = variant { Ok : bool; Err : UserClaimErrorResponse };
type Result_2 = variant { Ok : bool; Err : text };
type Result_3 = variant {
  Ok : SetReserveTransferAmountResponse;
  Err : SetReserveTransferAmountResponse;
};
type SetReserveTransferAmountRequest = record {
  transfer_amounts : vec record { text; nat };
};
type SetReserveTransferAmountResponse = variant {
  Success;
  InternalError : text;
};
type SetRewardTokenTypesRequest = record {
  token_list : vec record { text; TokenInfo };
};
type SetRewardTokenTypesResponse = variant { Success; InternalError : text };
type TokenInfo = record {
  fee : nat64;
  decimals : nat64;
  ledger_id : principal;
};
type UserClaimErrorResponse = variant {
  NeuronHotKeyAbsent;
  TokenSymbolInvalid : text;
  NeuronNotClaimed;
  NeuronOwnerInvalid : opt principal;
  NeuronHotKeyInvalid;
  TransferFailed : text;
  NeuronDoesNotExist;
  InternalError : text;
};
service : (Args) -> {
  add_neuron_ownership : (NeuronId) -> (Result);
  claim_reward : (NeuronId, text) -> (Result_1);
  get_neurons_by_owner : () -> (opt vec NeuronId) query;
  read : () -> (Result_2);
  remove_neuron_ownership : (NeuronId) -> (Result);
  set_reserve_transfer_amounts : (SetReserveTransferAmountRequest) -> (
      Result_3,
    );
  set_reward_token_types : (SetRewardTokenTypesRequest) -> (
      SetRewardTokenTypesResponse,
    );
}
