type Args = record { token : text; neuron_id : NeuronId };
type Args_1 = record { transfer_amounts : vec record { text; nat } };
type Args_2 = record { token_list : vec record { text; TokenInfo } };
type Args_3 = variant { Upgrade : UpgradeArgs; Init : InitArgs };
type BuildVersion = record { major : nat32; minor : nat32; patch : nat32 };
type InitArgs = record {
  sns_gov_canister_id : principal;
  test_mode : bool;
  version : BuildVersion;
  ogy_ledger_canister_id : principal;
  icp_ledger_canister_id : principal;
  sns_ledger_canister_id : principal;
  commit_hash : text;
};
type NeuronId = record { id : blob };
type Response = variant {
  Ok : bool;
  NeuronHotKeyAbsent;
  TokenSymbolInvalid : text;
  NeuronNotClaimed;
  NeuronOwnerInvalid : opt principal;
  NeuronHotKeyInvalid;
  TransferFailed : text;
  NeuronDoesNotExist;
  InternalError : text;
};
type Response_1 = variant { Success; InternalError : text };
type Response_2 = variant { Success; InternalError : text };
type TokenInfo = record {
  fee : nat64;
  decimals : nat64;
  ledger_id : principal;
};
type UpgradeArgs = record { version : BuildVersion; commit_hash : text };
service : (Args_3) -> {
  claim_reward : (Args) -> (Response);
  set_daily_gldgov_burn_rate : (nat) -> (Response_1);
  set_reserve_transfer_amounts : (Args_1) -> (Response_1);
  set_reward_token_types : (Args_2) -> (Response_2);
}
