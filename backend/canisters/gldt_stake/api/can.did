type Account = record { owner : opt principal; subaccount : opt Subaccount };
type Action = variant {
  ManageNervousSystemParameters : NervousSystemParameters;
  AddGenericNervousSystemFunction : NervousSystemFunction;
  RemoveGenericNervousSystemFunction : nat64;
  UpgradeSnsToNextVersion : record {};
  RegisterDappCanisters : RegisterDappCanisters;
  TransferSnsTreasuryFunds : TransferSnsTreasuryFunds;
  UpgradeSnsControlledCanister : UpgradeSnsControlledCanister;
  DeregisterDappCanisters : DeregisterDappCanisters;
  Unspecified : record {};
  ManageSnsMetadata : ManageSnsMetadata;
  ExecuteGenericNervousSystemFunction : ExecuteGenericNervousSystemFunction;
  Motion : Motion;
};
type AddNeuronPermissions = record {
  permissions_to_add : opt NeuronPermissionList;
  principal_id : opt principal;
};
type AddStakePositionErrors = variant {
  MaxActiveStakePositions : text;
  TransferError : text;
  AlreadyProcessing : text;
  InvalidStakeAmount : text;
  InvalidPrincipal : text;
  CallError : text;
};
type Amount = record { e8s : nat64 };
type Args = record { id : nat64; token : text };
type Args_1 = record { amount : nat64 };
type Args_2 = record { amount : nat };
type Args_3 = record { command : Command; neuron_id : blob };
type Args_4 = variant { Upgrade : UpgradeArgs; Init : InitArgs };
type BuildVersion = record { major : nat32; minor : nat32; patch : nat32 };
type By = variant {
  MemoAndController : MemoAndController;
  NeuronId : record {};
};
type ChangeAutoStakeMaturity = record {
  requested_setting_for_auto_stake_maturity : bool;
};
type ClaimOrRefresh = record { by : opt By };
type ClaimRewardErrors = variant {
  TransferError : text;
  InvalidRewardToken : text;
  AlreadyProcessing : text;
  InvalidPrincipal : text;
  NotFound : text;
  NotAuthorized : text;
  CallError : text;
  TokenImbalance : text;
};
type Command = variant {
  Split : Split;
  Follow : Follow;
  DisburseMaturity : DisburseMaturity;
  ClaimOrRefresh : ClaimOrRefresh;
  Configure : Configure;
  RegisterVote : RegisterVote;
  MakeProposal : Proposal;
  StakeMaturity : StakeMaturity;
  RemoveNeuronPermissions : RemoveNeuronPermissions;
  AddNeuronPermissions : AddNeuronPermissions;
  MergeMaturity : MergeMaturity;
  Disburse : Disburse;
};
type Configure = record { operation : opt Operation };
type CreateNeuronError = variant { TransferError : text; InternalError : text };
type DefaultFollowees = record { followees : vec record { nat64; Followees } };
type DeregisterDappCanisters = record {
  canister_ids : vec principal;
  new_controllers : vec principal;
};
type Disburse = record { to_account : opt Account; amount : opt Amount };
type DisburseMaturity = record {
  to_account : opt Account;
  percentage_to_disburse : nat32;
};
type DisburseMaturityInProgress = record {
  timestamp_of_disbursement_seconds : nat64;
  amount_e8s : nat64;
  account_to_disburse_to : opt Account;
};
type DissolveState = variant { Dissolved; Dissolving; NotDissolving };
type DissolveState_1 = variant {
  DissolveDelaySeconds : nat64;
  WhenDissolvedTimestampSeconds : nat64;
};
type Duration = record { secs : nat64; nanos : nat32 };
type ExecuteGenericNervousSystemFunction = record {
  function_id : nat64;
  payload : blob;
};
type Follow = record { function_id : nat64; followees : vec NeuronId };
type Followees = record { followees : vec NeuronId };
type FunctionType = variant {
  NativeNervousSystemFunction : record {};
  GenericNervousSystemFunction : GenericNervousSystemFunction;
};
type GenericNervousSystemFunction = record {
  validator_canister_id : opt principal;
  target_canister_id : opt principal;
  validator_method_name : opt text;
  target_method_name : opt text;
};
type IncreaseDissolveDelay = record {
  additional_dissolve_delay_seconds : nat32;
};
type InitArgs = record {
  test_mode : bool;
  reward_types : vec record { text; record { principal; nat } };
  authorized_principals : vec principal;
  version : BuildVersion;
  gld_sns_governance_canister_id : principal;
  gldt_ledger_id : principal;
  commit_hash : text;
  gldgov_ledger_id : principal;
  gld_sns_rewards_canister_id : principal;
};
type ManageSnsMetadata = record {
  url : opt text;
  logo : opt text;
  name : opt text;
  description : opt text;
};
type MemoAndController = record { controller : opt principal; memo : nat64 };
type MergeMaturity = record { percentage_to_merge : nat32 };
type Motion = record { motion_text : text };
type NervousSystemFunction = record {
  id : nat64;
  name : text;
  description : opt text;
  function_type : opt FunctionType;
};
type NervousSystemParameters = record {
  default_followees : opt DefaultFollowees;
  max_dissolve_delay_seconds : opt nat64;
  max_dissolve_delay_bonus_percentage : opt nat64;
  max_followees_per_function : opt nat64;
  neuron_claimer_permissions : opt NeuronPermissionList;
  neuron_minimum_stake_e8s : opt nat64;
  max_neuron_age_for_age_bonus : opt nat64;
  initial_voting_period_seconds : opt nat64;
  neuron_minimum_dissolve_delay_to_vote_seconds : opt nat64;
  reject_cost_e8s : opt nat64;
  max_proposals_to_keep_per_action : opt nat32;
  wait_for_quiet_deadline_increase_seconds : opt nat64;
  max_number_of_neurons : opt nat64;
  transaction_fee_e8s : opt nat64;
  max_number_of_proposals_with_ballots : opt nat64;
  max_age_bonus_percentage : opt nat64;
  neuron_grantable_permissions : opt NeuronPermissionList;
  voting_rewards_parameters : opt VotingRewardsParameters;
  maturity_modulation_disabled : opt bool;
  max_number_of_principals_per_neuron : opt nat64;
};
type Neuron = record {
  id : opt NeuronId;
  staked_maturity_e8s_equivalent : opt nat64;
  permissions : vec NeuronPermission;
  maturity_e8s_equivalent : nat64;
  cached_neuron_stake_e8s : nat64;
  created_timestamp_seconds : nat64;
  source_nns_neuron_id : opt nat64;
  auto_stake_maturity : opt bool;
  aging_since_timestamp_seconds : nat64;
  dissolve_state : opt DissolveState_1;
  voting_power_percentage_multiplier : nat64;
  vesting_period_seconds : opt nat64;
  disburse_maturity_in_progress : vec DisburseMaturityInProgress;
  followees : vec record { nat64; Followees };
  neuron_fees_e8s : nat64;
};
type NeuronId = record { id : blob };
type NeuronPermission = record {
  "principal" : opt principal;
  permission_type : vec int32;
};
type NeuronPermissionList = record { permissions : vec int32 };
type Operation = variant {
  ChangeAutoStakeMaturity : ChangeAutoStakeMaturity;
  StopDissolving : record {};
  StartDissolving : record {};
  IncreaseDissolveDelay : IncreaseDissolveDelay;
  SetDissolveTimestamp : SetDissolveTimestamp;
};
type Proposal = record {
  url : text;
  title : text;
  action : opt Action;
  summary : text;
};
type ProposalId = record { id : nat64 };
type RegisterDappCanisters = record { canister_ids : vec principal };
type RegisterVote = record { vote : int32; proposal : opt ProposalId };
type RemoveNeuronPermissions = record {
  permissions_to_remove : opt NeuronPermissionList;
  principal_id : opt principal;
};
type RemoveRewardErrors = variant {
  InsufficientBalance : text;
  RewardTokenTypeDoesNotExist : text;
};
type Response = variant { Success : text; InternalError : text };
type Result = variant { Ok : StakePositionResponse; Err : ClaimRewardErrors };
type Result_1 = variant { Ok : blob; Err : CreateNeuronError };
type Result_2 = variant {
  Ok : StakePositionResponse;
  Err : AddStakePositionErrors;
};
type Result_3 = variant { Ok; Err : text };
type Result_4 = variant { Ok : text; Err : text };
type Result_5 = variant {
  Ok : StakePositionResponse;
  Err : StartDissolvingErrors;
};
type Result_6 = variant {
  Ok : StakePositionResponse;
  Err : UnstakeRequestErrors;
};
type Result_7 = variant {
  Ok : StakePositionResponse;
  Err : UnstakeEarlyRequestErrors;
};
type SetDissolveTimestamp = record { dissolve_timestamp_seconds : nat64 };
type Split = record { memo : nat64; amount_e8s : nat64 };
type StakeMaturity = record { percentage_to_stake : opt nat32 };
type StakePositionError = variant {
  StartDissolvingError : text;
  AddStakePositionError : AddStakePositionErrors;
  UnStakeError : UnstakeErrors;
  AddRewardError : text;
  RemoveRewardError : RemoveRewardErrors;
};
type StakePositionResponse = record {
  id : nat64;
  staked : nat;
  dissolve_delay : Duration;
  early_unstake_fee : nat;
  claimable_rewards : vec record { text; nat };
  dissolved_date : opt nat64;
  created_at : nat64;
  age_bonus_multiplier : float64;
  owned_by : principal;
  dissolve_state : DissolveState;
  weighted_stake : nat;
};
type StartDissolvingErrors = variant {
  InvalidPrincipal : text;
  NotFound : text;
  NotAuthorized : text;
  StakePositionError : StakePositionError;
};
type Subaccount = record { subaccount : blob };
type TransferSnsTreasuryFunds = record {
  from_treasury : int32;
  to_principal : opt principal;
  to_subaccount : opt Subaccount;
  memo : opt nat64;
  amount_e8s : nat64;
};
type UnstakeEarlyRequestErrors = variant {
  TransferError : text;
  UnstakeErrors : UnstakeErrors;
  AlreadyProcessing : text;
  AlreadyUnstakedEarly : text;
  InvalidPrincipal : text;
  NotFound : text;
  NotAuthorized : text;
  CallError : text;
};
type UnstakeErrors = variant {
  NoDissolveDateSet : text;
  AlreadyProcessing : text;
  AlreadyUnstaked : text;
  DissolveDateNotSatisfied : text;
  InvalidDissolveState : text;
  CantUnstakeWithRewardsBalance : text;
};
type UnstakeRequestErrors = variant {
  TransferError : text;
  UnstakeErrors : UnstakeErrors;
  InvalidPrincipal : text;
  NotFound : text;
  AlreadyUnstaked : text;
  NotAuthorized : text;
  CallError : text;
  InvalidState : text;
};
type UpgradeArgs = record { version : BuildVersion; commit_hash : text };
type UpgradeSnsControlledCanister = record {
  new_canister_wasm : blob;
  mode : opt int32;
  canister_id : opt principal;
  canister_upgrade_arg : opt blob;
};
type VotingRewardsParameters = record {
  final_reward_rate_basis_points : opt nat64;
  initial_reward_rate_basis_points : opt nat64;
  reward_rate_transition_duration_seconds : opt nat64;
  round_duration_seconds : opt nat64;
};
service : (Args_4) -> {
  claim_reward : (Args) -> (Result);
  commit : () -> ();
  create_neuron : (Args_1) -> (Result_1);
  create_stake_position : (Args_2) -> (Result_2);
  get_active_user_positions : (opt principal) -> (
      vec StakePositionResponse,
    ) query;
  get_neurons : (null) -> (vec Neuron) query;
  get_position_by_id : (nat64) -> (opt StakePositionResponse) query;
  get_total_allocated_rewards : (null) -> (vec record { text; nat }) query;
  get_total_staked : (null) -> (nat) query;
  manage_sns_neuron : (Args_3) -> (Response);
  manual_sync_neurons : (null) -> (Result_3);
  process_oldest_reward_round : (null) -> (Result_4);
  start_dissolving : (nat64) -> (Result_5);
  unstake : (nat64) -> (Result_6);
  unstake_early : (nat64) -> (Result_7);
}
