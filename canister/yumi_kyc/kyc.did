type Workflow = 
 record {
   applicant_id: text;
   workflow_id: text;
   workflow_run_id: text;
 };
type VerificationResult = 
 variant {
   Fail;
   NA;
   Pass;
 };
type UserInfo = 
 record {
   email: text;
   userName: text;
 };
type UpgradStatus = 
 variant {
   AwaitingInput;
   None;
   UnderReview;
 };
type UpdateKycStatusReq = 
 record {
   account: KYCAccount;
   kycLevel: KYCLevel;
 };
type TokenSpec__1 = 
 variant {
   Extensible: CandyShared;
   IC: ICTokenSpec;
 };
type TokenSpec = 
 variant {
   Extensible: CandyShared;
   IC: ICTokenSpec;
 };
type RiskAssessment = 
 variant {
   High;
   Low;
   Medium;
 };
type Rate = 
 record {
   percison: nat;
   rate: nat;
 };
type PropertyShared = 
 record {
   immutable: bool;
   name: text;
   value: CandyShared;
 };
type Nanos = nat64;
type LogMessagesData = 
 record {
   message: text;
   timeNanos: Nanos;
 };
type Kyc = 
 service {
   addSubmitKyc: (KYCAccount) -> ();
   addwhitelist: (vec principal) -> ();
   batch_update_kyc_status: (vec UpdateKycStatusReq) -> ();
   delWhitelist: (vec principal) -> ();
   del_primary_link: (principal) -> () oneway;
   deleUserRiskAssessment: (principal) -> ();
   deleUserUpgradStatus: (principal) -> ();
   deleteBatchKycPendingUserInfo: (vec text) -> ();
   deletePrincipalWorkflow: (principal, text) -> ();
   flushUsersRiskAssessment: () -> ();
   flushUsersUpgradStatus: () -> ();
   getAllExRates: () -> (vec record {
                               text;
                               Rate;
                             }) query;
   getAllKycAccess: () ->
    (vec record {
           Channel;
           vec record {
                 KYCLevel;
                 Access;
               };
         }) query;
   getAllKycStatus: () -> (vec record {
                                 KYCAccount;
                                 KYCLevel;
                               }) query;
   getAllKycStatusUpdateRecord: () -> (vec record {
                                             text;
                                             text;
                                           }) query;
   getAllKycTier3Limit: () -> (vec record {
                                     KYCAccount;
                                     nat;
                                   }) query;
   getAllKycWorkflows: () -> (vec record {
                                    principal;
                                    vec Workflow;
                                  }) query;
   getAllRiskAssessment: () -> (vec record {
                                      principal;
                                      RiskAssessment;
                                    }) query;
   getAllRouters: () -> (vec record {
                               principal;
                               Channel;
                             }) query;
   getAllTradeAmount: () -> (vec record {
                                   principal;
                                   nat;
                                 }) query;
   getAllUserUpgradStatus: () -> (vec record {
                                        principal;
                                        UpgradStatus;
                                      }) query;
   getBatchKycPendingUserInfo: (vec text) ->
    (vec record {
           text;
           UserInfo;
         }) query;
   getBatchPricipalWorkflow: (vec principal) ->
    (vec record {
           principal;
           vec Workflow;
         }) query;
   getCanisterLog: (opt CanisterLogRequest) ->
    (opt CanisterLogResponse) query;
   getCustomerKyc: () -> (vec KYCAccount) query;
   getDecimal: () -> (nat) query;
   getEntrieKycPendingUserInfo: () -> (vec record {
                                             text;
                                             UserInfo;
                                           }) query;
   getExRate: (text) -> (Rate) query;
   getExRateByToken: (TokenSpec__1) -> (Rate, nat) query;
   getKycStatus: (KYCAccount) -> (opt KYCLevel) query;
   getKycStatusUpdateRecord: (vec text) -> (vec record {
                                                  text;
                                                  text;
                                                }) query;
   getOwner: () -> (principal) query;
   getPricipalWorkflow: (principal) -> (opt vec Workflow) query;
   getUserRiskAssessment: (principal) -> (RiskAssessment) query;
   getUserTradeAmount: (principal) -> (opt nat) query;
   getUserUpgradStatus: (principal) -> (UpgradStatus) query;
   getWhitelist: () -> (vec principal) query;
   icrc17_kyc_notification: (KYCNotification) -> () oneway;
   icrc17_kyc_notification_for_yumi: (Channel, KYCNotification) -> () oneway;
   icrc17_kyc_request: (KYCCanisterRequest) -> (KYCResult);
   icrc17_kyc_request_for_yumi: (Channel, KYCCanisterRequest) -> (KYCResult);
   inputPricipalWorkflow: (principal, Workflow) -> ();
   inputkycPendingUserInfo: (text, UserInfo) -> ();
   resetTradeAmount: () -> ();
   setDecimal: (nat) -> ();
   setExRate: (vec ExRate) -> ();
   setKycAccess: (Channel, KYCLevel, Access) -> ();
   setKycTier3Limit: (principal, nat) -> ();
   setOwner: (principal) -> ();
   setRouter: (principal, Channel) -> ();
   set_primary_link: (principal, principal) -> () oneway;
   updateKycStatusRecord: (vec text, text) -> ();
   updateUsersRiskAssessment: (vec record {
                                     principal;
                                     RiskAssessment;
                                   }) -> ();
   updateUsersUpgradStatus: (vec record {
                                   principal;
                                   UpgradStatus;
                                 }) -> ();
   user_kyc_request: (KYCAccount) -> (KYCLevel) query;
 };
type KYCResult = 
 record {
   aml: VerificationResult;
   amount: opt nat;
   kyc: VerificationResult;
   message: opt text;
   token: opt TokenSpec;
 };
type KYCNotification = 
 record {
   amount: opt nat;
   counterparty: KYCAccount__1;
   metadata: opt CandyShared;
   token: opt TokenSpec;
 };
type KYCLevel = 
 variant {
   NA;
   Tier1;
   Tier2;
   Tier3;
 };
type KYCCanisterRequest = 
 record {
   amount: opt nat;
   counterparty: KYCAccount__1;
   extensible: opt CandyShared;
   token: opt TokenSpec;
 };
type KYCAccount__1 = 
 variant {
   Account: vec nat8;
   Extensible: CandyShared;
   ICRC1: record {
            owner: principal;
            subaccount: opt vec nat8;
          };
 };
type KYCAccount = 
 variant {
   Account: vec nat8;
   Extensible: CandyShared;
   ICRC1: record {
            owner: principal;
            subaccount: opt vec nat8;
          };
 };
type ICTokenSpec = 
 record {
   canister: principal;
   decimals: nat;
   fee: opt nat;
   id: opt nat;
   standard: variant {
               DIP20;
               EXTFungible;
               ICRC1;
               Ledger;
               Other: CandyShared;
             };
   symbol: text;
 };
type GetLogMessagesParameters = 
 record {
   count: nat32;
   filter: opt GetLogMessagesFilter;
   fromTimeNanos: opt Nanos;
 };
type GetLogMessagesFilter = 
 record {
   analyzeCount: nat32;
   messageContains: opt text;
   messageRegex: opt text;
 };
type GetLatestLogMessagesParameters = 
 record {
   count: nat32;
   filter: opt GetLogMessagesFilter;
   upToTimeNanos: opt Nanos;
 };
type ExRate = 
 record {
   pair: text;
   rate: Rate;
 };
type Channel = 
 variant {
   Co_owned;
   Gold;
   Land;
   Yumi;
 };
type CanisterLogResponse = 
 variant {
   messages: CanisterLogMessages;
   messagesInfo: CanisterLogMessagesInfo;
 };
type CanisterLogRequest = 
 variant {
   getLatestMessages: GetLatestLogMessagesParameters;
   getMessages: GetLogMessagesParameters;
   getMessagesInfo;
 };
type CanisterLogMessagesInfo = 
 record {
   count: nat32;
   features: vec opt CanisterLogFeature;
   firstTimeNanos: opt Nanos;
   lastTimeNanos: opt Nanos;
 };
type CanisterLogMessages = 
 record {
   data: vec LogMessagesData;
   lastAnalyzedMessageTimeNanos: opt Nanos;
 };
type CanisterLogFeature = 
 variant {
   filterMessageByContains;
   filterMessageByRegex;
 };
type CandyShared = 
 variant {
   Array: vec CandyShared;
   Blob: blob;
   Bool: bool;
   Bytes: vec nat8;
   Class: vec PropertyShared;
   Float: float64;
   Floats: vec float64;
   Int: int;
   Int16: int16;
   Int32: int32;
   Int64: int64;
   Int8: int8;
   Map: vec record {
              CandyShared;
              CandyShared;
            };
   Nat: nat;
   Nat16: nat16;
   Nat32: nat32;
   Nat64: nat64;
   Nat8: nat8;
   Nats: vec nat;
   Option: opt CandyShared;
   Principal: principal;
   Set: vec CandyShared;
   Text: text;
 };
type Access = 
 variant {
   Fail;
   Limit: nat;
   Pass;
 };
service : (principal) -> Kyc
