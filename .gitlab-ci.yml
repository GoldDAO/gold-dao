default:
  image: registry.bochslerfinance.com/runners-images/dfinity-canisters:0.19.0@sha256:a7889ff2b3bc1e9d4106ba659383ffe2dd293b93c390d847d5300e6f19001cd4
  tags:
    - docker
  interruptible: true
  before_script:
    - dfx --version
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - api_failure
      - runner_unsupported
      - unknown_failure

cache:
  - key: "dfx-$CI_COMMIT_REF_SLUG"
    paths:
      - .dfx

stages:
  - preparation
  - lint
  - test
  - integration_testing
  - build
  - deploy

include:
  # Templates:
  - local: scripts/ci-cd/.node_template.yml
  - local: scripts/ci-cd/.rust_template.yml
  - local: scripts/ci-cd/.dfx_templates.yml
  # Frontend linters:
  - local: scripts/ci-cd/.frontend_linter.yml
    inputs:
      src-folder: gldt_landing_page
  - local: scripts/ci-cd/.frontend_linter.yml
    inputs:
      src-folder: gldt_explorer
  - local: scripts/ci-cd/.frontend_linter.yml
    inputs:
      src-folder: gld_dashboard
  # Unit tests
  - local: scripts/ci-cd/.canister_unit_test_coverage.yml
    inputs:
      src-folder: gldt_core
  - local: scripts/ci-cd/.canister_unit_test_coverage.yml
    inputs:
      src-folder: icp_neuron
  - local: scripts/ci-cd/.canister_unit_test_coverage.yml
    inputs:
      src-folder: super_stats_v3
  - local: scripts/ci-cd/.canister_unit_test_coverage.yml
    inputs:
      src-folder: token_metrics
  - local: scripts/ci-cd/.canister_unit_test_coverage.yml
    inputs:
      src-folder: sns_rewards
  - local: scripts/ci-cd/.canister_unit_test_coverage.yml
    inputs:
      src-folder: management
  - local: scripts/ci-cd/.canister_unit_test_coverage.yml
    inputs:
      src-folder: cycles_manager
  - local: scripts/ci-cd/.canister_unit_test_coverage.yml
    inputs:
      src-folder: sns_neuron_controller
  # Integration tests
  - local: scripts/ci-cd/.integration_tests.yml
  # Canister builds
  - local: scripts/ci-cd/.canister_builds.yml
    inputs:
      src-folder: cycles_manager
  - local: scripts/ci-cd/.canister_builds.yml
    inputs:
      src-folder: gldt_core
  - local: scripts/ci-cd/.canister_builds.yml
    inputs:
      src-folder: management
  - local: scripts/ci-cd/.canister_builds.yml
    inputs:
      src-folder: icp_neuron
  - local: scripts/ci-cd/.canister_builds.yml
    inputs:
      src-folder: sns_neuron_controller
  - local: scripts/ci-cd/.canister_builds.yml
    inputs:
      src-folder: sns_rewards
  - local: scripts/ci-cd/.canister_builds.yml
    inputs:
      src-folder: super_stats_v3
  - local: scripts/ci-cd/.canister_builds.yml
    inputs:
      src-folder: token_metrics
  # Frontend builds
  - local: scripts/ci-cd/.frontend_builds.yml
    inputs:
      src-folder: gldt_landing_page
  - local: scripts/ci-cd/.frontend_builds.yml
    inputs:
      src-folder: gldt_explorer
  - local: scripts/ci-cd/.frontend_builds.yml
    inputs:
      src-folder: gld_dashboard
  # Backend deployments
  - local: scripts/ci-cd/.canister_deploys.yml
    inputs:
      src-folder: cycles_manager
  - local: scripts/ci-cd/.canister_deploys.yml
    inputs:
      src-folder: gldt_core
  - local: scripts/ci-cd/.canister_deploys.yml
    inputs:
      src-folder: management
  - local: scripts/ci-cd/.canister_deploys.yml
    inputs:
      src-folder: icp_neuron
  - local: scripts/ci-cd/.canister_deploys.yml
    inputs:
      src-folder: sns_neuron_controller
  - local: scripts/ci-cd/.canister_deploys.yml
    inputs:
      src-folder: sns_rewards
  - local: scripts/ci-cd/.canister_deploys.yml
    inputs:
      src-folder: super_stats_v3
  - local: scripts/ci-cd/.canister_deploys.yml
    inputs:
      src-folder: token_metrics
  # Frontend deployments
  - local: scripts/ci-cd/.frontend_deploys.yml
    inputs:
      src-folder: gld_dashboard
      canister-id: "mpece-iqaaa-aaaal-qizma-cai"

################################################################################
# Cache preparation
################################################################################
node cache:
  stage: preparation
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "./frontend/**/*.{js,json,jsx,md,mdx,css,html,svg}"
  extends: .node template
  script:
    - npm pkg get name description author license workspaces engines
    - node --version
    - npm --version

################################################################################
# Linters
################################################################################

# See includes above for frontends lint

rust lint:
  stage: lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "Cargo.{lock,toml}"
        - "backend/**/*.{rs,toml,lock,md}"
    - if: $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_REF_NAME == "develop"
      changes:
        - "Cargo.{lock,toml}"
        - "backend/**/*.{rs,toml,lock,md}"
  extends: .rust template
  script:
    - cargo clippy
################################################################################
# Unit tests
################################################################################

# See includes above

################################################################################
# Builds
################################################################################

# See includes above for canister builds

################################################################################
# Integration tests
################################################################################
# integration tests trigger:
#   stage: integration_testing
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME != "develop"
#       changes:
#         - "backend/libraries/**/*.{rs,toml,lock,md}"
#         - "backend/external_canisters/**/*.{rs,toml,lock,md}"
#         - "backend/canisters/**/*.{rs,toml,lock,md}"
#       when: manual
#   script:
#     - echo "Running integration tests"

# integration tests:
#   stage: integration_testing
#   rules:
#     - if: $CI_COMMIT_TAG =~ '/^[a-zA-Z_]+-v\d+\.\d+\.\d+$/'
#       when: always
#     - if: $CI_COMMIT_REF_NAME == "develop" || $CI_PIPELINE_SOURCE == "merge_request_event"
#       changes:
#         - "backend/libraries/**/*.{rs,toml,lock,md}"
#         - "backend/external_canisters/**/*.{rs,toml,lock,md}"
#         - "backend/canisters/**/*.{rs,toml,lock,md}"
#   needs:
#     [
#     "cycles_manager integration-test build",
#     "gldt_core integration-test build",
#     "icp_neuron integration-test build",
#     "management integration-test build",
#     "sns_rewards integration-test build",
#     "token_metrics integration-test build"
#     ]
#   extends: .rust template
#   tags:
#     - dind
#   services:
#     - docker:dind
#   variables:
#     DOCKER_TLS_CERTDIR: "/certs"
#     DOCKER_SECURITY_OPT: "--security-opt seccomp=unconfined"
#   script:
#     - wget -O pocket-ic.gz https://github.com/dfinity/pocketic/releases/download/4.0.0/pocket-ic-x86_64-linux.gz
#     - gzip -d pocket-ic.gz
#     - chmod +x ./pocket-ic
#     - mv ./pocket-ic ./backend/integration_testing/pocket-ic
#     - ulimit -n 202400
#     - ulimit -f 2024000
#     - cargo test -p integration_testing

################################################################################
# Deployments
################################################################################

# .asset canisters upgrade proposal tests:
#   stage: deploy
#   variables:
#     CANISTER_NAME: "gldt_swap_app"
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"
#       needs: ["swap_app test build"]
#       variables:
#         TARGET_NETWORK: staging
#         PEM_FILE: testid.pem
#         TEST_QUILL: "--dry-run"
#   cache:
#     policy: pull
#   before_script:
#     - dfx identity new --storage-mode plaintext testid
#     - dfx identity use testid
#     - dfx identity get-principal
#     - dfx start --clean --background --artificial-delay 40
#     - dfx identity export testid > testid.pem
#   script:
#     - dfx canister create --all
#     - export GLDT_FRONT_ID=$(dfx canister id gldt_swap_app)
#     - !reference [.asset canister staging deploy, script]
#   after_script:
#     - dfx stop
#   environment:
#     name: swap app
#     deployment_tier: staging
#     url: $SWAP_APP_URL
#     action: verify

# gldt swap app staging:
#   stage: deploy
#   resource_group: frontend staging deployment
#   variables:
#     CANISTER_NAME: "gldt_swap_app"
#   rules:
#     - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
#       needs: ["gldt_swap_app staging build"]
#       variables:
#         TARGET_NETWORK: staging
#         PEM_FILE: "${PEM_FILE_STAGING}"
#   before_script:
#     - !reference [.import dfx identity, before_script]
#   script:
#     - !reference [.asset canister staging deploy, script]
#   environment:
#     name: gldt swap app
#     deployment_tier: staging
#     url: $SWAP_APP_URL
#     action: start

# gldt swap app production:
#   stage: deploy
#   resource_group: frontend production deployment
#   variables:
#     CANISTER_NAME: "gldt_swap_app"
#   rules:
#     - if: $CI_COMMIT_TAG =~ '/^gldt_swap_app-v\d+\.\d+\.\d+$/'
#       needs: ["gldt_swap_app production build"]
#       variables:
#         TARGET_NETWORK: ic
#         PEM_FILE: "${PEM_FILE_PRODUCTION}"
#   before_script:
#     - !reference [.import dfx identity, before_script]
#   script:
#     - !reference [.asset canister production deploy, script]
#   environment:
#     name: gldt swap app
#     deployment_tier: production
#     url: $SWAP_APP_URL
#     action: start

# gldt landing page staging:
#   stage: deploy
#   resource_group: frontend staging deployment
#   variables:
#     CANISTER_NAME: "gldt_landing_page"
#   rules:
#     - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
#       needs: ["gldt_landing_page staging build"]
#       variables:
#         TARGET_NETWORK: staging
#         PEM_FILE: "${PEM_FILE_STAGING}"
#   before_script:
#     - !reference [.import dfx identity, before_script]
#   script:
#     - !reference [.asset canister staging deploy, script]
#   environment:
#     name: gldt landing page
#     deployment_tier: staging
#     url: $LANDING_URL
#     action: start

# gldt landing page production:
#   stage: deploy
#   resource_group: frontend production deployment
#   variables:
#     CANISTER_NAME: "gldt_landing_page"
#   rules:
#     - if: $CI_COMMIT_TAG =~ '/^gldt_landing_page-v\d+\.\d+\.\d+$/'
#       needs: ["gldt_landing_page production build"]
#       variables:
#         TARGET_NETWORK: ic
#         PEM_FILE: "${PEM_FILE_PRODUCTION}"
#   before_script:
#     - !reference [.import dfx identity, before_script]
#   script:
#     - !reference [.asset canister production deploy, script]
#   environment:
#     name: gldt landing page
#     deployment_tier: production
#     url: https://gldt.org/
#     action: start

# gldt explorer staging:
#   stage: deploy
#   resource_group: frontend staging deployment
#   variables:
#     CANISTER_NAME: "gldt_explorer"
#   rules:
#     - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
#       needs: ["gldt_explorer staging build"]
#       variables:
#         TARGET_NETWORK: staging
#         PEM_FILE: "${PEM_FILE_STAGING}"
#   before_script:
#     - !reference [.import dfx identity, before_script]
#   script:
#     - !reference [.asset canister staging deploy, script]
#   environment:
#     name: gldt explorer
#     deployment_tier: staging
#     url: https://staging.explorer.gldt.org/
#     action: start

# gldt explorer production:
#   stage: deploy
#   resource_group: frontend production deployment
#   variables:
#     CANISTER_NAME: "gldt_explorer"
#   rules:
#     - if: $CI_COMMIT_TAG =~ '/^gldt_explorer-v\d+\.\d+\.\d+$/'
#       needs: ["gldt_explorer production build"]
#       variables:
#         TARGET_NETWORK: ic
#         PEM_FILE: "${PEM_FILE_PRODUCTION}"
#   before_script:
#     - !reference [.import dfx identity, before_script]
#   script:
#     - !reference [.asset canister production deploy, script]
#   environment:
#     name: gldt explorer
#     deployment_tier: production
#     url: https://explorer.gldt.org/
#     action: start

# gld dashboard staging:
#   stage: deploy
#   resource_group: frontend staging deployment
#   variables:
#     CANISTER_NAME: "gld_dashboard"
#   rules:
#     - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
#       changes:
#         - "client/gld_dashboard/*.{js,json}"
#         - "client/gld_dashboard/**/*.{js,jsx,ts,tsx,md,mdx,css,html,svg}"
#       needs: ["gld_dashboard staging build"]
#       variables:
#         TARGET_NETWORK: staging
#         PEM_FILE: "${PEM_FILE_STAGING}"
#   before_script:
#     - !reference [.import dfx identity, before_script]
#   script:
#     - !reference [.asset canister staging deploy, script]
#   environment:
#     name: gld dashboard
#     deployment_tier: staging
#     url: https://mpece-iqaaa-aaaal-qizma-cai.icp0.io/
#     action: start

# gld dashboard preprod:
#   stage: deploy
#   resource_group: frontend preprod deployment
#   variables:
#     CANISTER_NAME: "gld_dashboard"
#   rules:
#     - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
#       changes:
#         - "client/gld_dashboard/*.{js,json}"
#         - "client/gld_dashboard/**/*.{js,jsx,ts,tsx,md,mdx,css,html,svg}"
#       needs: ["gld_dashboard preprod build"]
#       variables:
#         TARGET_NETWORK: preprod
#         PEM_FILE: "${PEM_FILE_STAGING}"
#   before_script:
#     - !reference [.import dfx identity, before_script]
#   script:
#     - !reference [.asset canister preprod deploy, script]
#   environment:
#     name: gld dashboard
#     deployment_tier: staging
#     url: https://pmjzm-tyaaa-aaaan-qmmda-cai.icp0.io/
#     action: start

# gld dashboard production:
#   stage: deploy
#   resource_group: frontend production deployment
#   variables:
#     CANISTER_NAME: "gld_dashboard"
#   rules:
#     - if: $CI_COMMIT_TAG =~ '/^gld_dashboard-v\d+\.\d+\.\d+$/'
#       changes:
#         - "client/gld_dashboard/*.{js,json}"
#         - "client/gld_dashboard/**/*.{js,jsx,ts,tsx,md,mdx,css,html,svg}"
#       needs: ["gld_dashboard production build"]
#       variables:
#         TARGET_NETWORK: ic
#         PEM_FILE: "${PEM_FILE_PRODUCTION}"
#   before_script:
#     - !reference [.import dfx identity, before_script]
#   script:
#     - !reference [.asset canister production deploy, script]
#   environment:
#     name: gld dashboard
#     deployment_tier: production
#     url: https://dashboard.gold-dao.org/
#     action: start

# .backend canisters upgrade proposal tests:
#   stage: deploy
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"
#       needs: ["gldt_core test build"]
#       variables:
#         TARGET_NETWORK: staging
#         PEM_FILE: testid.pem
#   cache:
#     policy: pull
#   before_script:
#     - dfx identity new --storage-mode plaintext testid
#     - dfx identity use testid
#     - dfx identity get-principal
#     - dfx start --clean --background --artificial-delay 40
#     - dfx identity export testid > testid.pem
#   script:
#     - dfx canister create --all
#     - export GLDT_CORE_ID=$(dfx canister id gldt_core)
#     - . scripts/deploy-gldt-core.sh --quill-test --reinstall $TARGET_NETWORK
#   after_script:
#     - dfx stop
#   environment:
#     name: gldt_core
#     deployment_tier: staging
#     url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=m45be-jaaaa-aaaak-qcgnq-cai
#     action: verify
