default:
  image: registry.bochslerfinance.com/runners-images/dfinity-canisters:0.19.0@sha256:a7889ff2b3bc1e9d4106ba659383ffe2dd293b93c390d847d5300e6f19001cd4
  tags:
    - docker
  interruptible: true
  before_script:
    - dfx --version
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - api_failure
      - runner_unsupported
      - unknown_failure

cache:
  - key: "dfx-$CI_COMMIT_REF_SLUG"
    paths:
      - .dfx

stages:
  - preparation
  - lint
  - build
  - test
  - integration_testing
  - deploy

include:
  # Templates:
  - local: scripts/ci-cd/.node_template.yml
  - local: scripts/ci-cd/.rust_template.yml
  # Frontend linters:
  - local: scripts/ci-cd/.frontend_linter.yml
    inputs:
      src-folder: gldt_landing_page
  - local: scripts/ci-cd/.frontend_linter.yml
    inputs:
      src-folder: gldt_explorer
  # - local: scripts/ci-cd/.frontend_linter.yml
  #   inputs:
  #     src-folder: gld_dashboard
  # Unit tests coverage
  - local: scripts/ci-cd/.canister_unit_test_coverage.yml
    inputs:
      src-folder: gldt_core
  - local: scripts/ci-cd/.canister_unit_test_coverage.yml
    inputs:
      src-folder: icp_neuron
  - local: scripts/ci-cd/.canister_unit_test_coverage.yml
    inputs:
      src-folder: token_metrics
  - local: scripts/ci-cd/.canister_unit_test_coverage.yml
    inputs:
      src-folder: sns_rewards
  - local: scripts/ci-cd/.canister_unit_test_coverage.yml
    inputs:
      src-folder: management
  - local: scripts/ci-cd/.canister_unit_test_coverage.yml
    inputs:
      src-folder: cycles_manager
  # Canister builds
  - local: scripts/ci-cd/.canister_builds.yml
    inputs:
      src-folder: gldt_core
  - local: scripts/ci-cd/.canister_builds.yml
    inputs:
      src-folder: icp_neuron
  - local: scripts/ci-cd/.canister_builds.yml
    inputs:
      src-folder: token_metrics
  - local: scripts/ci-cd/.canister_builds.yml
    inputs:
      src-folder: sns_rewards
  - local: scripts/ci-cd/.canister_builds.yml
    inputs:
      src-folder: management
  - local: scripts/ci-cd/.canister_builds.yml
    inputs:
      src-folder: cycles_manager
  # Canister generate declaration
  - local: scripts/ci-cd/.generate_declaration.yml
    inputs:
      src-folder: cycles_manager
  - local: scripts/ci-cd/.generate_declaration.yml
    inputs:
      src-folder: gldt_core
  - local: scripts/ci-cd/.generate_declaration.yml
    inputs:
      src-folder: icp_neuron
  - local: scripts/ci-cd/.generate_declaration.yml
    inputs:
      src-folder: management
  - local: scripts/ci-cd/.generate_declaration.yml
    inputs:
      src-folder: sns_rewards
  - local: scripts/ci-cd/.generate_declaration.yml
    inputs:
      src-folder: token_metrics
  # Frontend builds
  - local: scripts/ci-cd/.frontend_builds.yml
    inputs:
      src-folder: gldt_landing_page
  - local: scripts/ci-cd/.frontend_builds.yml
    inputs:
      src-folder: gldt_explorer
  - local: scripts/ci-cd/.frontend_builds.yml
    inputs:
      src-folder: gld_dashboard
  # Deployments
  - local: scripts/ci-cd/.dfx_templates.yml

################################################################################
# Cache preparation
################################################################################
node cache:
  stage: preparation
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "./frontend/{**,**/**,**/**/**}/*.{js,json,jsx,md,mdx,css,html,svg}"
  extends: .node template
  script:
    - npm pkg get name description author license workspaces engines
    - node --version
    - npm --version

################################################################################
# Linters
################################################################################

# See includes above for frontends lint

rust lint:
  stage: lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "Cargo.{lock,toml}"
        - "backend/{**,**/**,**/**/**}/*.{rs,toml,lock}"
    - if: $CI_OPEN_MERGE_REQUESTS
      when: never
      changes:
        - "Cargo.{lock,toml}"
        - "backend/{**,**/**,**/**/**}/*.{rs,toml,lock}"
    - if: $CI_COMMIT_REF_NAME == "develop"
      changes:
        - "Cargo.{lock,toml}"
        - "backend/{**,**/**,**/**/**}/*.{rs,toml,lock}"
  extends: .rust template
  script:
    - cargo clippy

################################################################################
# Unit tests
################################################################################

# See includes above

################################################################################
# Builds
################################################################################

# See includes above for canister builds

################################################################################
# Integration tests
################################################################################
integration tests:
  stage: integration_testing
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
      needs:
        ["sns_rewards integration-test build", "cycles_manager canister build"]
    - if: $CI_OPEN_MERGE_REQUESTS
      when: never
  extends: .rust template
  tags:
    - dind
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_SECURITY_OPT: "--security-opt seccomp=unconfined"
  script:
    - wget -O pocket-ic.gz https://github.com/dfinity/pocketic/releases/download/4.0.0/pocket-ic-x86_64-linux.gz
    - gzip -d pocket-ic.gz
    - chmod +x ./pocket-ic
    - mv ./pocket-ic ./backend/integration_testing/pocket-ic
    - ulimit -n 202400
    - ulimit -f 2024000
    - cargo tarpaulin -p integration_testing -j 2 --lib --no-fail-fast -o Xml
  coverage: /^\d+.\d+% coverage/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml

################################################################################
# Deployments
################################################################################

check canister ids:
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
      variables:
        TARGET_NETWORK: staging
        PEM_FILE: "${PEM_FILE_STAGING}"
    - if: $CI_COMMIT_TAG =~ '/^(core)|(icp_neuron)|(ledger)|(indexer)|(token_metrics)|(sns_rewards)|(management)|(cycles_manager)-v\d+\.\d+\.\d+$/'
      variables:
        TARGET_NETWORK: ic
        PEM_FILE: "${PEM_FILE_PRODUCTION}"
  before_script:
    - !reference [.import dfx identity, before_script]
  script:
    - scripts/pre-deploy.sh --network $TARGET_NETWORK
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}-canister-ids"
    paths:
      - canister_ids.json
    expire_in: 1 hour

.asset canisters upgrade proposal tests:
  stage: deploy
  variables:
    CANISTER_NAME: "gldt_swap_app"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"
      needs: ["swap_app test build"]
      variables:
        TARGET_NETWORK: staging
        PEM_FILE: testid.pem
        TEST_QUILL: "--dry-run"
  cache:
    policy: pull
  before_script:
    - dfx identity new --storage-mode plaintext testid
    - dfx identity use testid
    - dfx identity get-principal
    - dfx start --clean --background --artificial-delay 40
    - dfx identity export testid > testid.pem
  script:
    - dfx canister create --all
    - export GLDT_FRONT_ID=$(dfx canister id gldt_swap_app)
    - !reference [.asset canister staging deploy, script]
  after_script:
    - dfx stop
  environment:
    name: swap app
    deployment_tier: staging
    url: $SWAP_APP_URL
    action: verify

# gldt swap app staging:
#   stage: deploy
#   resource_group: frontend staging deployment
#   variables:
#     CANISTER_NAME: "gldt_swap_app"
#   rules:
#     - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
#       needs: ["gldt_swap_app staging build"]
#       variables:
#         TARGET_NETWORK: staging
#         PEM_FILE: "${PEM_FILE_STAGING}"
#   before_script:
#     - !reference [.import dfx identity, before_script]
#   script:
#     - !reference [.asset canister staging deploy, script]
#   environment:
#     name: gldt swap app
#     deployment_tier: staging
#     url: $SWAP_APP_URL
#     action: start

# gldt swap app production:
#   stage: deploy
#   resource_group: frontend production deployment
#   variables:
#     CANISTER_NAME: "gldt_swap_app"
#   rules:
#     - if: $CI_COMMIT_TAG =~ '/^gldt_swap_app-v\d+\.\d+\.\d+$/'
#       needs: ["gldt_swap_app production build"]
#       variables:
#         TARGET_NETWORK: ic
#         PEM_FILE: "${PEM_FILE_PRODUCTION}"
#   before_script:
#     - !reference [.import dfx identity, before_script]
#   script:
#     - !reference [.asset canister production deploy, script]
#   environment:
#     name: gldt swap app
#     deployment_tier: production
#     url: $SWAP_APP_URL
#     action: start

# gldt landing page staging:
#   stage: deploy
#   resource_group: frontend staging deployment
#   variables:
#     CANISTER_NAME: "gldt_landing_page"
#   rules:
#     - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
#       needs: ["gldt_landing_page staging build"]
#       variables:
#         TARGET_NETWORK: staging
#         PEM_FILE: "${PEM_FILE_STAGING}"
#   before_script:
#     - !reference [.import dfx identity, before_script]
#   script:
#     - !reference [.asset canister staging deploy, script]
#   environment:
#     name: gldt landing page
#     deployment_tier: staging
#     url: $LANDING_URL
#     action: start

# gldt landing page production:
#   stage: deploy
#   resource_group: frontend production deployment
#   variables:
#     CANISTER_NAME: "gldt_landing_page"
#   rules:
#     - if: $CI_COMMIT_TAG =~ '/^gldt_landing_page-v\d+\.\d+\.\d+$/'
#       needs: ["gldt_landing_page production build"]
#       variables:
#         TARGET_NETWORK: ic
#         PEM_FILE: "${PEM_FILE_PRODUCTION}"
#   before_script:
#     - !reference [.import dfx identity, before_script]
#   script:
#     - !reference [.asset canister production deploy, script]
#   environment:
#     name: gldt landing page
#     deployment_tier: production
#     url: https://gldt.org/
#     action: start

# gldt explorer staging:
#   stage: deploy
#   resource_group: frontend staging deployment
#   variables:
#     CANISTER_NAME: "gldt_explorer"
#   rules:
#     - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
#       needs: ["gldt_explorer staging build"]
#       variables:
#         TARGET_NETWORK: staging
#         PEM_FILE: "${PEM_FILE_STAGING}"
#   before_script:
#     - !reference [.import dfx identity, before_script]
#   script:
#     - !reference [.asset canister staging deploy, script]
#   environment:
#     name: gldt explorer
#     deployment_tier: staging
#     url: https://staging.explorer.gldt.org/
#     action: start

# gldt explorer production:
#   stage: deploy
#   resource_group: frontend production deployment
#   variables:
#     CANISTER_NAME: "gldt_explorer"
#   rules:
#     - if: $CI_COMMIT_TAG =~ '/^gldt_explorer-v\d+\.\d+\.\d+$/'
#       needs: ["gldt_explorer production build"]
#       variables:
#         TARGET_NETWORK: ic
#         PEM_FILE: "${PEM_FILE_PRODUCTION}"
#   before_script:
#     - !reference [.import dfx identity, before_script]
#   script:
#     - !reference [.asset canister production deploy, script]
#   environment:
#     name: gldt explorer
#     deployment_tier: production
#     url: https://explorer.gldt.org/
#     action: start

gld dashboard staging:
  stage: deploy
  resource_group: frontend staging deployment
  variables:
    CANISTER_NAME: "gld_dashboard"
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
      changes:
        - "client/gld_dashboard/*.{js,json}"
        - "client/gld_dashboard/{**,**/**,**/**/**}/*.{js,jsx,ts,tsx,md,mdx,css,html,svg}"
      needs: ["gld_dashboard staging build"]
      variables:
        TARGET_NETWORK: staging
        PEM_FILE: "${PEM_FILE_STAGING}"
  before_script:
    - !reference [.import dfx identity, before_script]
  script:
    - !reference [.asset canister staging deploy, script]
  environment:
    name: gld dashboard
    deployment_tier: staging
    url: https://mpece-iqaaa-aaaal-qizma-cai.icp0.io/
    action: start

gld dashboard preprod:
  stage: deploy
  resource_group: frontend preprod deployment
  variables:
    CANISTER_NAME: "gld_dashboard"
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
      changes:
        - "client/gld_dashboard/*.{js,json}"
        - "client/gld_dashboard/{**,**/**,**/**/**}/*.{js,jsx,ts,tsx,md,mdx,css,html,svg}"
      needs: ["gld_dashboard preprod build"]
      variables:
        TARGET_NETWORK: preprod
        PEM_FILE: "${PEM_FILE_STAGING}"
  before_script:
    - !reference [.import dfx identity, before_script]
  script:
    - !reference [.asset canister preprod deploy, script]
  environment:
    name: gld dashboard
    deployment_tier: staging
    url: https://pmjzm-tyaaa-aaaan-qmmda-cai.icp0.io/
    action: start

gld dashboard production:
  stage: deploy
  resource_group: frontend production deployment
  variables:
    CANISTER_NAME: "gld_dashboard"
  rules:
    - if: $CI_COMMIT_TAG =~ '/^gld_dashboard-v\d+\.\d+\.\d+$/'
      changes:
        - "client/gld_dashboard/*.{js,json}"
        - "client/gld_dashboard/{**,**/**,**/**/**}/*.{js,jsx,ts,tsx,md,mdx,css,html,svg}"
      needs: ["gld_dashboard production build"]
      variables:
        TARGET_NETWORK: ic
        PEM_FILE: "${PEM_FILE_PRODUCTION}"
  before_script:
    - !reference [.import dfx identity, before_script]
  script:
    - !reference [.asset canister production deploy, script]
  environment:
    name: gld dashboard
    deployment_tier: production
    url: https://dashboard.gold-dao.org/
    action: start

.backend canisters upgrade proposal tests:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"
      needs: ["gldt_core test build"]
      variables:
        TARGET_NETWORK: staging
        PEM_FILE: testid.pem
  cache:
    policy: pull
  before_script:
    - dfx identity new --storage-mode plaintext testid
    - dfx identity use testid
    - dfx identity get-principal
    - dfx start --clean --background --artificial-delay 40
    - dfx identity export testid > testid.pem
  script:
    - dfx canister create --all
    - export GLDT_CORE_ID=$(dfx canister id gldt_core)
    - . scripts/deploy-gldt-core.sh --quill-test --reinstall $TARGET_NETWORK
  after_script:
    - dfx stop
  environment:
    name: gldt_core
    deployment_tier: staging
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=m45be-jaaaa-aaaak-qcgnq-cai
    action: verify

gldt core staging:
  stage: deploy
  resource_group: backend canister staging deployment
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
      changes:
        - "backend/libraries/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/external_canisters/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/canisters/gldt_core/{**,**/**,**/**/**}/*.{rs,toml,lock}"
  variables:
    TARGET_NETWORK: staging
    PEM_FILE: "${PEM_FILE_STAGING}"
  needs: ["gldt_core canister build", "check canister ids"]
  before_script:
    - !reference [.import dfx identity, before_script]
  script:
    - . scripts/deploy-gldt-core.sh --reinstall $TARGET_NETWORK
  environment:
    name: gldt_core
    deployment_tier: staging
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=m45be-jaaaa-aaaak-qcgnq-cai
    action: start

gldt core:
  stage: deploy
  resource_group: backend canister production deployment
  rules:
    - if: $CI_COMMIT_TAG =~ '/^gldt_core-v\d+\.\d+\.\d+$/'
      changes:
        - "backend/libraries/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/external_canisters/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/canisters/gldt_core/{**,**/**,**/**/**}/*.{rs,toml,lock}"
      when: manual
  variables:
    TARGET_NETWORK: ic
    PEM_FILE: "${PEM_FILE_PRODUCTION}"
  needs: ["gldt_core canister build", "check canister ids"]
  before_script:
    - !reference [.import dfx identity, before_script]
  script:
    - . scripts/deploy-gldt-core.sh $TARGET_NETWORK
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}-canister-ids"
    paths:
      - canister_ids.json
    expire_in: 6 months
  environment:
    name: gldt_core
    deployment_tier: production
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=m5bu4-7qaaa-aaaap-abrxq-cai
    action: start

icp neuron staging:
  stage: deploy
  resource_group: backend canister staging deployment
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
      changes:
        - "backend/libraries/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/external_canisters/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/canisters/icp_neuron/{**,**/**,**/**/**}/*.{rs,toml,lock}"
  variables:
    TARGET_NETWORK: staging
    PEM_FILE: "${PEM_FILE_STAGING}"
  needs: ["icp_neuron canister build", "check canister ids"]
  before_script:
    - !reference [.import dfx identity, before_script]
  script:
    - . scripts/deploy-icp-neuron.sh --reinstall $TARGET_NETWORK
  environment:
    name: icp_neuron
    deployment_tier: staging
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=j2neh-vqaaa-aaaal-aduxq-cai
    action: start

icp neuron:
  stage: deploy
  resource_group: backend canister staging deployment
  rules:
    - if: $CI_COMMIT_TAG =~ '/^icp_neuron-v\d+\.\d+\.\d+$/'
      changes:
        - "backend/libraries/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/external_canisters/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/canisters/icp_neuron/{**,**/**,**/**/**}/*.{rs,toml,lock}"
      when: manual
  variables:
    TARGET_NETWORK: ic
    PEM_FILE: "${PEM_FILE_PRODUCTION}"
  needs: ["icp_neuron canister build", "check canister ids"]
  before_script:
    - !reference [.import dfx identity, before_script]
  script:
    - . scripts/deploy-icp-neuron.sh $TARGET_NETWORK
  environment:
    name: icp_neuron
    deployment_tier: production
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=j4jiq-sqaaa-aaaap-ab23a-cai
    action: start

token metrics staging:
  stage: deploy
  resource_group: backend canister staging deployment
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
      changes:
        - "backend/libraries/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/external_canisters/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/canisters/token_metrics/{**,**/**,**/**/**}/*.{rs,toml,lock}"
  variables:
    TARGET_NETWORK: staging
    PEM_FILE: "${PEM_FILE_STAGING}"
  needs: ["token_metrics canister build", "check canister ids"]
  before_script:
    - !reference [.import dfx identity, before_script]
  script:
    - . scripts/deploy-token-metrics.sh $TARGET_NETWORK
  environment:
    name: token_metrics
    deployment_tier: staging
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=yfjcz-3iaaa-aaaap-accjq-cai
    action: start

token metrics:
  stage: deploy
  resource_group: backend canister staging deployment
  rules:
    - if: $CI_COMMIT_TAG =~ '/^token_metrics-v\d+\.\d+\.\d+$/'
      changes:
        - "backend/libraries/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/external_canisters/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/canisters/token_metrics/{**,**/**,**/**/**}/*.{rs,toml,lock}"
      when: manual
  variables:
    TARGET_NETWORK: ic
    PEM_FILE: "${PEM_FILE_PRODUCTION}"
  needs: ["token_metrics canister build", "check canister ids"]
  before_script:
    - !reference [.import dfx identity, before_script]
  script:
    - . scripts/deploy-token-metrics.sh $TARGET_NETWORK
  environment:
    name: token_metrics
    deployment_tier: production
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=teiwz-pqaaa-aaaap-ag7hq-cai
    action: start

sns rewards staging:
  stage: deploy
  resource_group: backend canister staging deployment
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
      changes:
        - "backend/libraries/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/external_canisters/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/canisters/sns_rewards/{**,**/**,**/**/**}/*.{rs,toml,lock}"
  variables:
    TARGET_NETWORK: staging
    PEM_FILE: "${PEM_FILE_STAGING}"
  needs:
    ["sns_rewards canister build", "check canister ids", "integration tests"]
  before_script:
    - !reference [.import dfx identity, before_script]
  script:
    - . scripts/deploy-sns-rewards.sh $TARGET_NETWORK
  environment:
    name: sns_rewards
    deployment_tier: staging
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=2f5ll-gqaaa-aaaak-qcfuq-cai
    action: start

sns rewards:
  stage: deploy
  resource_group: backend canister staging deployment
  rules:
    - if: $CI_COMMIT_TAG =~ '/^sns_rewards-v\d+\.\d+\.\d+$/'
      changes:
        - "backend/libraries/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/external_canisters/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/canisters/sns_rewards/{**,**/**,**/**/**}/*.{rs,toml,lock}"
      when: manual
  variables:
    TARGET_NETWORK: ic
    PEM_FILE: "${PEM_FILE_PRODUCTION}"
  needs:
    ["sns_rewards canister build", "check canister ids", "integration tests"]
  before_script:
    - !reference [.import dfx identity, before_script]
  script:
    - . scripts/deploy-sns-rewards.sh $TARGET_NETWORK
  environment:
    name: sns_rewards
    deployment_tier: production
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=iyehc-lqaaa-aaaap-ab25a-cai
    action: start

management staging:
  stage: deploy
  resource_group: backend canister staging deployment
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
      changes:
        - "backend/libraries/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/external_canisters/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/canisters/management/{**,**/**,**/**/**}/*.{rs,toml,lock}"
  variables:
    TARGET_NETWORK: staging
    PEM_FILE: "${PEM_FILE_STAGING}"
  needs:
    ["management canister build", "check canister ids", "integration tests"]
  before_script:
    - !reference [.import dfx identity, before_script]
  script:
    - . scripts/deploy-management.sh $TARGET_NETWORK
  environment:
    name: management
    deployment_tier: staging
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=t5uzw-sqaaa-aaaan-qmoaq-cai
    action: start

management prod:
  stage: deploy
  resource_group: backend canister staging deployment
  rules:
    - if: $CI_COMMIT_TAG =~ '/^management-v\d+\.\d+\.\d+$/'
      changes:
        - "backend/libraries/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/external_canisters/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/canisters/management/{**,**/**,**/**/**}/*.{rs,toml,lock}"
      when: manual
  variables:
    TARGET_NETWORK: ic
    PEM_FILE: "${PEM_FILE_PRODUCTION}"
  needs:
    ["management canister build", "check canister ids", "integration tests"]
  before_script:
    - !reference [.import dfx identity, before_script]
  script:
    - . scripts/deploy-management.sh $TARGET_NETWORK
  environment:
    name: management
    deployment_tier: production
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=g5je6-yaaaa-aaaap-ahkza-cai
    action: start

cycles manager staging:
  stage: deploy
  resource_group: backend canister staging deployment
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
      changes:
        - "backend/libraries/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/external_canisters/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/canisters/cycles_manager/{**,**/**,**/**/**}/*.{rs,toml,lock}"
  variables:
    TARGET_NETWORK: staging
    PEM_FILE: "${PEM_FILE_STAGING}"
  needs:
    ["cycles_manager canister build", "check canister ids", "integration tests"]
  before_script:
    - !reference [.import dfx identity, before_script]
  script:
    - . scripts/deploy-cycles-manager.sh $TARGET_NETWORK
  environment:
    name: cycles_manager
    deployment_tier: staging
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=y4bmn-taaaa-aaaak-qillq-cai
    action: start

cycles manager:
  stage: deploy
  resource_group: backend canister staging deployment
  rules:
    - if: $CI_COMMIT_TAG =~ '/^cycles_manager-v\d+\.\d+\.\d+$/'
      changes:
        - "backend/libraries/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/external_canisters/{**,**/**,**/**/**}/*.{rs,toml,lock}"
        - "backend/canisters/cycles_manager/{**,**/**,**/**/**}/*.{rs,toml,lock}"
      when: manual
  variables:
    TARGET_NETWORK: ic
    PEM_FILE: "${PEM_FILE_PRODUCTION}"
  needs:
    ["cycles_manager canister build", "check canister ids", "integration tests"]
  before_script:
    - !reference [.import dfx identity, before_script]
  script:
    - . scripts/deploy-cycles-manager.sh $TARGET_NETWORK
  environment:
    name: cycles_manager
    deployment_tier: production
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=atslz-hiaaa-aaaam-acq6q-cai
    action: start
