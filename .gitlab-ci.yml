default:
  image: registry.bochslerfinance.com/runners-images/dfinity-canisters:0.16.1-quill@sha256:956e24a43b1dc6433a918d4ebed076302e9f246065255b49a07f2267ae060613
  tags:
    - docker
  interruptible: true
  before_script:
    - dfx --version
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - api_failure
      - runner_unsupported
      - unknown_failure

cache:
  - key: "dfx-$CI_COMMIT_REF_SLUG"
    paths:
      - .dfx

stages:
  - preparation
  - lint
  - test
  - build
  - deploy

include:
  # Templates:
  - local: scripts/ci-cd/.node_template.yml
  - local: scripts/ci-cd/.rust_template.yml
  # Frontend linters:
  - local: scripts/ci-cd/.frontend_linter.yml
    inputs:
      src-folder: swap_app
  - local: scripts/ci-cd/.frontend_linter.yml
    inputs:
      src-folder: landing_page
  - local: scripts/ci-cd/.frontend_linter.yml
    inputs:
      src-folder: explorer
  # Unit tests coverage
  - local: scripts/ci-cd/.canister_unit_test_coverage.yml
    inputs:
      src-folder: gldt_core
  - local: scripts/ci-cd/.canister_unit_test_coverage.yml
    inputs:
      src-folder: gldt_fee_compensation
  # Canister builds
  - local: scripts/ci-cd/.canister_builds.yml
    inputs:
      src-folder: gldt_core
  - local: scripts/ci-cd/.canister_builds.yml
    inputs:
      src-folder: gldt_fee_compensation
  # Frontend builds
  - local: scripts/ci-cd/.frontend_builds.yml
    inputs:
      src-folder: swap_app
  - local: scripts/ci-cd/.frontend_builds.yml
    inputs:
      src-folder: landing_page
  - local: scripts/ci-cd/.frontend_builds.yml
    inputs:
      src-folder: explorer

################################################################################
# Cache preparation
################################################################################
node cache:
  stage: preparation
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  extends: .node template
  script:
    - npm pkg get name description author license workspaces engines
    - node --version
    - npm --version

cargo cache:
  stage: preparation
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  extends: .rust template
  script:
    - cargo version
    - cargo verify-project

################################################################################
# Linters
################################################################################

# See includes above for frontends lint

rust lint:
  stage: lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "Cargo.{lock,toml}"
        - "backend/canisters/{gldt_core,gldt_core/src,gldt_core/src/**}/*.{rs,toml,lock}"
        - "backend/canisters/{gldt_fee_compensation,gldt_fee_compensation/src,gldt_fee_compensation/src/**}/*.{rs,toml,lock}"
    - if: $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_REF_NAME == "develop"
  extends: .rust template
  script:
    - touch backend/canisters/gldt_core/api/can.did
    - touch backend/canisters/gldt_fee_compensation/api/can.did
    - cargo clippy

################################################################################
# Unit tests
################################################################################

# See includes above

################################################################################
# Builds
################################################################################

# See includes above for canister builds

generate test declarations:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      needs: ["gldt_core test build","gldt_fee_compensation test build"]
  script:
    - dfx generate
    - scripts/refactor_nft_declarations.sh
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-TEST-declarations"
    paths:
      - backend/**/declarations
    expire_in: 1 day

generate declarations:
  stage: build
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
      when: never
    - if: $CI_COMMIT_REF_NAME == "develop" || $CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME =~ '/^(?:landing_page|explorer|swap_app)-v\d+\.\d+\.\d+$/'
      needs: ["gldt_core canister build", "gldt_fee_compensation canister build"]
  script:
    - dfx generate
    - scripts/refactor_nft_declarations.sh
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-declarations"
    paths:
      - backend/**/api
    expire_in: 6 months

# See includes above for frontend builds

################################################################################
# Deployments
################################################################################
local deploy and tests:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      needs: ["gldt_core test build", "gldt_fee_compensation test build", "swap_app test build", "landing_page test build", "explorer test build"]
  before_script:
    - dfx --version
    - dfx start --clean --background
  script:
    - NETWORK='local' scripts/local-deploy.sh
  after_script:
    - cat canister_ids.json
    - dfx stop

.import dfx identity: &import_dfx_id
  - dfx --version
  - dfx identity import --storage-mode plaintext gitlab-ci-gldt $PEM_FILE
  - dfx identity use gitlab-ci-gldt
  - dfx identity whoami
  - if [[ $(date -R) == "Fri"* ]]; then echo "It appear you are deploying on a Friday....."; fi
  - dfx identity get-principal

.asset canister staging deploy: &asset_canister_staging_deploy
  - dfx deploy --network $TARGET_NETWORK --no-wallet --mode reinstall -y gldt_${CANISTER_NAME}

.asset canister production deploy: &asset_canister_production_deploy
  - dfx deploy --network $TARGET_NETWORK --no-wallet --mode reinstall --by-proposal -y gldt_${CANISTER_NAME}
  - >
    quill sns --canister-ids-file canister_ids.json make-upgrade-canister-proposal $PROPOSER_NEURON_ID
    --target-canister-id $(cat canister_ids.json | jq -r .gldt_${CANISTER_NAME}.ic)
    --wasm-path .dfx/local/gldt_${CANISTER_NAME}/gldt_${CANISTER_NAME}.wasm.gz
    --title "Upgrade `${CANISTER_NAME} to `${$CI_COMMIT_TAG}`
    --url ${DETAILS_URL} | quill send --yes --

check canister ids:
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
      variables:
        TARGET_NETWORK: staging
        PEM_FILE: "${PEM_FILE_STAGING}"
    - if: $CI_COMMIT_TAG =~ '/^(core)|(fee_compensation)|(ledger)|(indexer)-v\d+\.\d+\.\d+$/'
      variables:
        TARGET_NETWORK: ic
        PEM_FILE: "${PEM_FILE_PRODUCTION}"
  before_script:
    - *import_dfx_id
  script:
    - scripts/pre-deploy.sh --network $TARGET_NETWORK
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}-canister-ids"
    paths:
      - canister_ids.json
    expire_in: 1 hour

swap app staging:
  stage: deploy
  variables:
    CANISTER_NAME: "swap_app"
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
      needs: ["swap_app staging build"]
      variables:
        TARGET_NETWORK: staging
        PEM_FILE: "${PEM_FILE_STAGING}"
  before_script:
    - *import_dfx_id
  script:
    - *asset_canister_staging_deploy
  environment:
    name: swap app
    deployment_tier: staging
    url: $SWAP_APP_URL
    action: start

swap app production:
  stage: deploy
  variables:
    CANISTER_NAME: "swap_app"
  rules:
    - if: $CI_COMMIT_TAG =~ '/^swap_app-v\d+\.\d+\.\d+$/'
      needs: ["swap_app production build"]
      variables:
        TARGET_NETWORK: ic
        PEM_FILE: "${PEM_FILE_PRODUCTION}"
  before_script:
    - *import_dfx_id
  script:
    - *asset_canister_production_deploy
  environment:
    name: swap app
    deployment_tier: production
    url: $SWAP_APP_URL
    action: start

landing page staging:
  stage: deploy
  variables:
    CANISTER_NAME: "landing_page"
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
      needs: ["landing_page staging build"]
      variables:
        TARGET_NETWORK: staging
        PEM_FILE: "${PEM_FILE_STAGING}"
  before_script:
    - *import_dfx_id
  script:
    - *asset_canister_staging_deploy
  environment:
    name: landing page
    deployment_tier: staging
    url: $LANDING_URL
    action: start

landing page production:
  stage: deploy
  variables:
    CANISTER_NAME: "landing_page"
  rules:
    - if: $CI_COMMIT_TAG =~ '/^landing_page-v\d+\.\d+\.\d+$/'
      needs: ["landing_page production build"]
      variables:
        TARGET_NETWORK: ic
        PEM_FILE: "${PEM_FILE_PRODUCTION}"
  before_script:
    - *import_dfx_id
  script:
    - *asset_canister_production_deploy
  environment:
    name: landing page
    deployment_tier: production
    url: https://gldt.org/
    action: start

explorer staging:
  stage: deploy
  variables:
    CANISTER_NAME: "explorer"
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
      needs: ["explorer staging build"]
      variables:
        TARGET_NETWORK: staging
        PEM_FILE: "${PEM_FILE_STAGING}"
  before_script:
    - *import_dfx_id
  script:
    - *asset_canister_staging_deploy
  environment:
    name: explorer
    deployment_tier: staging
    url: https://staging.explorer.gldt.org/
    action: start

explorer production:
  stage: deploy
  variables:
    CANISTER_NAME: "explorer"
  rules:
    - if: $CI_COMMIT_TAG =~ '/^explorer-v\d+\.\d+\.\d+$/'
      needs: ["explorer production build"]
      variables:
        TARGET_NETWORK: ic
        PEM_FILE: "${PEM_FILE_PRODUCTION}"
  before_script:
    - *import_dfx_id
  script:
    - *asset_canister_production_deploy
  environment:
    name: explorer
    deployment_tier: production
    url: https://explorer.gldt.org/
    action: start

gldt core staging:
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
  variables:
    TARGET_NETWORK: staging
    PEM_FILE: "${PEM_FILE_STAGING}"
  needs: ["gldt_core canister build", "check canister ids"]
  before_script:
    - *import_dfx_id
  script:
    - scripts/deploy-gldt-core.sh --reinstall $TARGET_NETWORK
  environment:
    name: gldt_core
    deployment_tier: staging
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=m45be-jaaaa-aaaak-qcgnq-cai
    action: start

gldt core:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ '/^core-v\d+\.\d+\.\d+$/'
  variables:
    TARGET_NETWORK: ic
    PEM_FILE: "${PEM_FILE_PRODUCTION}"
  needs: ["gldt_core canister build", "check canister ids"]
  before_script:
    - *import_dfx_id
  script:
    - scripts/deploy-gldt-core.sh $TARGET_NETWORK
  artifacts:
    name: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}-canister-ids"
    paths:
      - canister_ids.json
    expire_in: 6 months
  environment:
    name: gldt_core
    deployment_tier: production
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=m5bu4-7qaaa-aaaap-abrxq-cai
    action: start

gldt fee compensation staging:
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
  variables:
    TARGET_NETWORK: staging
    PEM_FILE: "${PEM_FILE_STAGING}"
  needs: ["gldt_fee_compensation canister build", "check canister ids"]
  before_script:
    - *import_dfx_id
  script:
    - scripts/deploy-gldt-fee-compensation.sh --reinstall $TARGET_NETWORK
  environment:
    name: gldt_fee_compensation
    deployment_tier: staging
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=ccjse-eaaaa-aaaao-a2ixq-cai
    action: start

gldt fee compensation:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ '/^fee_compensation-v\d+\.\d+\.\d+$/'
  variables:
    TARGET_NETWORK: ic
    PEM_FILE: "${PEM_FILE_PRODUCTION}"
  needs: ["gldt_fee_compensation canister build", "check canister ids"]
  before_script:
    - *import_dfx_id
  script:
    - scripts/deploy-gldt-fee-compensation.sh $TARGET_NETWORK
  environment:
    name: gldt_fee_compensation
    deployment_tier: production
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=oa42u-myaaa-aaaap-abrya-cai
    action: start

gldt ledger staging:
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
  variables:
    TARGET_NETWORK: staging
    PEM_FILE: "${PEM_FILE_STAGING}"
  needs: ["check canister ids"]
  before_script:
    - *import_dfx_id
  script:
    - scripts/deploy-ledger.sh $TARGET_NETWORK
  environment:
    name: gldt_ledger
    deployment_tier: staging
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=6uad6-fqaaa-aaaam-abovq-cai
    action: start

gldt ledger:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ '/^ledger-v\d+\.\d+\.\d+$/'
      when: manual
  variables:
    TARGET_NETWORK: ic
    PEM_FILE: "${PEM_FILE_PRODUCTION}"
  needs: ["check canister ids"]
  before_script:
    - *import_dfx_id
  script:
    - scripts/deploy-ledger.sh $TARGET_NETWORK
  environment:
    name: gldt_ledger
    deployment_tier: production
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=oh54a-baaaa-aaaap-abryq-cai
    action: start

gldt ledger indexer staging:
  stage: deploy
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop" && $CI_PIPELINE_SOURCE != "merge_request_event"
  variables:
    TARGET_NETWORK: staging
    PEM_FILE: "${PEM_FILE_STAGING}"
  needs: ["check canister ids"]
  before_script:
    - *import_dfx_id
  script:
    - scripts/deploy-ledger-indexer.sh $TARGET_NETWORK
  environment:
    name: gldt_ledger_indexer
    deployment_tier: staging
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=wusb2-uiaaa-aaaao-a2lca-cai
    action: start

gldt ledger indexer:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG =~ '/^indexer-v\d+\.\d+\.\d+$/'
      when: manual
  variables:
    TARGET_NETWORK: ic
    PEM_FILE: "${PEM_FILE_PRODUCTION}"
  needs: ["check canister ids"]
  before_script:
    - *import_dfx_id
  script:
    - scripts/deploy-ledger-indexer.sh $TARGET_NETWORK
  environment:
    name: gldt_ledger_indexer
    deployment_tier: production
    url: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=oo6x4-xiaaa-aaaap-abrza-cai
    action: start
